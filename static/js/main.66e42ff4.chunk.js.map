{"version":3,"sources":["ArtSearch.js","App.js","serviceWorker.js","index.js"],"names":["ArtSearch","state","animalChoice","artArray","artResult","finalArtwork","axios","url","method","responseType","params","q","this","props","userChoice","hasImages","then","data","objectIDs","Math","floor","random","length","setState","console","log","objectDetails","response","Component","App","handleClick","event","isClick","currentTarget","value","className","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"mRAwFeA,G,wDA9EX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTC,aAAc,GACdC,SAAU,GACVC,UAAW,GACXC,aAAc,IANR,E,gEAUO,IAAD,OAChBC,IAAM,CACFC,IAAK,kEACLC,OAAQ,MACRC,aAAc,OACdC,OAAQ,CACJC,EAAGC,KAAKC,MAAMC,WACdC,WAAU,KAEfC,MAAM,SAACb,GAEN,IAAMC,GADND,EAAWA,EAASc,KAAKC,WACEC,KAAKC,MAAMD,KAAKE,SAAWlB,EAASmB,SAC/D,EAAKC,SAAS,CACVpB,aAEJqB,QAAQC,IAAIrB,MAITY,KACHV,IAAM,CACFC,IAAK,oEACLC,OAAQ,MACRC,aAAc,SACfO,MAAM,SAACU,GACNA,EAAgBA,EAAcT,KAC9B,EAAKM,SAAS,CACVG,kBAEJF,QAAQC,IAAIC,MACbV,MAAM,SAACW,GACNH,QAAQC,IAAIE,GACZ,EAAKJ,SAAS,CACVlB,aAAcsB,EAASV,a,+BAUnC,OAEI,6BACJ,4BAAKL,KAAKC,MAAMC,iB,GA3DAc,cCwCTC,E,kDAtCb,aAAe,IAAD,8BACZ,gBAOFC,YAAc,SAACC,GAEb,EAAKR,SAAS,CACZS,SAAS,EACT9B,aAAc6B,EAAME,cAAcC,SAVpC,EAAKjC,MAAQ,CACX+B,SAAS,EACT9B,aAAc,IAJJ,E,qDAiBZ,OACE,yBAAKiC,UAAU,YACf,kDACA,sJAEA,yBAAKA,UAAU,mBACb,4BAAQD,MAAM,OAAOE,QAASxB,KAAKkB,aAAnC,OACA,4BAAQI,MAAM,OAAOE,QAASxB,KAAKkB,aAAnC,OACA,4BAAQI,MAAM,OAAOE,QAASxB,KAAKkB,aAAnC,OACA,4BAAQI,MAAM,UAAUE,QAASxB,KAAKkB,aAAtC,WAIAlB,KAAKX,MAAM+B,QAAU,kBAAC,EAAD,CAAWlB,WAAcF,KAAKX,MAAMC,eAAkB,U,GAhCjE0B,aCKES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.66e42ff4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n// import ArtResult from './ArtResult'\r\nimport App from './App';\r\nimport './App.css';\r\n\r\n\r\nclass ArtSearch extends Component {\r\n    \r\n    \r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            animalChoice: {},\r\n            artArray: [],\r\n            artResult: [],\r\n            finalArtwork: {},\r\n        }\r\n    }\r\n    \r\n    componentDidMount() {\r\n        axios({\r\n            url: 'https://collectionapi.metmuseum.org/public/collection/v1/search',\r\n            method: 'GET',\r\n            responseType: 'json',\r\n            params: {\r\n                q: this.props.userChoice,\r\n                hasImages:true,\r\n            }\r\n        }).then( (artArray) => {\r\n            artArray = artArray.data.objectIDs;\r\n            const artResult = artArray[Math.floor(Math.random() * artArray.length)];\r\n            this.setState({\r\n                artArray,\r\n            })\r\n            console.log(artResult)\r\n            \r\n//Then plug artResult into search for object, with accompanying image, info, etc\r\n//https://collectionapi.metmuseum.org/public/collection/v1/objects/ then artResult I guess\r\n            }).then(\r\n            axios({\r\n                url: 'https://collectionapi.metmuseum.org/public/collection/v1/objects/',\r\n                method: 'GET',\r\n                responseType: 'json',\r\n            }).then( (objectDetails) => {\r\n                objectDetails = objectDetails.data;\r\n                this.setState({\r\n                    objectDetails,\r\n                })\r\n                console.log(objectDetails)\r\n            }).then( (response) => {\r\n                console.log(response);\r\n                this.setState({\r\n                    finalArtwork: response.data\r\n                })\r\n            })\r\n        ) \r\n    };\r\n    \r\n    \r\n    \r\n    render() {\r\n        \r\n        return (\r\n            \r\n            <div>\r\n        <h3>{this.props.userChoice}</h3>\r\n        \r\n        {/* <p>{artArray}</p> */}\r\n    </div>\r\n            )\r\n            \r\n            \r\n            \r\n        };\r\n    }\r\n    \r\n    // <img src={this.state.artResult.primaryImage}></img>\r\n        \r\n    // <img src={this.state.finalArtwork.primaryImage} alt={this.state.finalArtwork.title}></img>\r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default ArtSearch;","import React, { Component } from 'react';\n// import ArtResult from './ArtResult';\nimport ArtSearch from './ArtSearch';\nimport axios from 'axios';\nimport './App.css';\n\n\nclass App extends Component {\n  \n  constructor() {\n    super();\n    this.state = {\n      isClick: false,\n      animalChoice: '',\n    }\n  }\n  \n  handleClick = (event) => {\n    // console.log(event.currentTarget.value);\n    this.setState({\n      isClick: true,\n      animalChoice: event.currentTarget.value,\n    })\n  }\n  \n  render() {\n    return (\n      <div className=\"mainPage\">\n      <h1>Animals @ The Met!</h1>\n      <h2>Press a button below to see a piece of artwork from the Metropolitan Museum of Art featuring the corresponding animal!</h2>\n      \n      <div className=\"buttonAlignment\">\n        <button value=\"cats\" onClick={this.handleClick}>Cat</button>\n        <button value=\"dogs\" onClick={this.handleClick}>Dog</button>\n        <button value=\"pigs\" onClick={this.handleClick}>Pig</button>\n        <button value=\"dragons\" onClick={this.handleClick}>Dragon</button>\n      </div>\n      \n      {\n        this.state.isClick ? <ArtSearch userChoice = {this.state.animalChoice}/> : null\n      }\n\n    </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}