{"version":3,"sources":["ArtSearch.js","App.js","serviceWorker.js","index.js"],"names":["ArtSearch","getApiData","artResult","axios","url","method","responseType","params","q","props","userChoice","hasImages","then","artArray","data","objectIDs","Math","floor","random","length","setState","objectDetails","state","animalChoice","finalArtwork","this","prevProps","className","title","artistDisplayName","src","primaryImage","alt","Component","App","handleClick","event","isClick","currentTarget","value","onClick","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mRA0EeA,G,wDAtEb,aAAe,IAAD,8BACZ,gBAYFC,WAAa,WACX,IAAIC,EACJC,IAAM,CACJC,IAAK,kEACLC,OAAQ,MACRC,aAAc,OACdC,OAAQ,CACNC,EAAG,EAAKC,MAAMC,WACdC,WAAW,KAIZC,MAAK,SAACC,GACLA,EAAWA,EAASC,KAAKC,UACzBb,EAAYW,EAASG,KAAKC,MAAMD,KAAKE,SAAWL,EAASM,SACzD,EAAKC,SAAS,CACZP,gBAKHD,MAAK,WACJT,IAAM,CACJC,IAAI,oEAAD,OAAsEF,GACzEG,OAAQ,MACRC,aAAc,SACbM,MAAK,SAACS,GACPA,EAAgBA,EAAcP,KAC9B,EAAKM,SAAS,CACZC,yBAxCR,EAAKC,MAAQ,CACXC,aAAc,GACdV,SAAU,GACVX,UAAW,GACXsB,aAAc,GACdH,cAAe,IAPL,E,gEAiDZI,KAAKxB,e,yCAIYyB,GACbD,KAAKhB,MAAMC,aAAegB,EAAUhB,YACtCe,KAAKxB,e,+BAKP,OACE,yBAAK0B,UAAU,kBACb,4BAAKF,KAAKvB,WACV,uCAAauB,KAAKH,MAAMD,eAAiBI,KAAKH,MAAMD,cAAcO,MAAlE,eAAqFH,KAAKH,MAAMD,eAAiBI,KAAKH,MAAMD,cAAcQ,kBAA1I,KACA,yBAAKC,IAAKL,KAAKH,MAAMD,eAAiBI,KAAKH,MAAMD,cAAcU,aAAcC,IAAKP,KAAKH,MAAMD,eAAiBI,KAAKH,MAAMD,cAAcO,a,GAjEvHK,cCiDTC,E,kDA7Cb,aAAe,IAAD,8BACZ,gBAQFC,YAAc,SAACC,GACb,EAAKhB,SAAS,CACZiB,SAAS,EACTd,aAAca,EAAME,cAAcC,SAVpC,EAAKjB,MAAQ,CACXe,SAAS,EACTd,aAAc,IAJJ,E,qDAiBZ,OACE,yBAAKI,UAAU,YACf,kDACA,sJAEA,6BAASA,UAAU,oBAEjB,yBAAKA,UAAU,mBACb,4BAAQY,MAAM,SAASC,QAASf,KAAKU,aAAa,uBAAGM,KAAK,KAAR,WAClD,4BAAQF,MAAM,WAAWC,QAASf,KAAKU,aAAa,uBAAGM,KAAK,KAAR,SACpD,4BAAQF,MAAM,QAAQC,QAASf,KAAKU,aAAa,uBAAGM,KAAK,KAAR,UACjD,4BAAQF,MAAM,cAAcC,QAASf,KAAKU,aAAa,uBAAGM,KAAK,KAAR,YACvD,4BAAQF,MAAM,eAAeC,QAASf,KAAKU,aAAa,uBAAGM,KAAK,KAAR,YAMpDhB,KAAKH,MAAMe,QAAU,kBAAC,EAAD,CAAW3B,WAAce,KAAKH,MAAMC,eAAkB,W,GArCvEU,aCOES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.80b5e117.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport './App.css';\r\nclass ArtSearch extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      animalChoice: {},\r\n      artArray: [],\r\n      artResult: [],\r\n      finalArtwork: {},\r\n      objectDetails: [],\r\n    };\r\n  }\r\n\r\n//   A variable is created to contain the user's selection from the App.js\r\n// The MET's Search endpoint is called with the user's selection query inserted \r\n  getApiData = () => {\r\n    let artResult;\r\n    axios({\r\n      url: 'https://collectionapi.metmuseum.org/public/collection/v1/search',\r\n      method: 'GET',\r\n      responseType: 'json',\r\n      params: {\r\n        q: this.props.userChoice,\r\n        hasImages: true,\r\n      },\r\n    })\r\n    // The resulting array of Object IDs is mapped and fed through a randomizing function to produce a single ID's return\r\n      .then((artArray) => {\r\n        artArray = artArray.data.objectIDs;\r\n        artResult = artArray[Math.floor(Math.random() * artArray.length)];\r\n        this.setState({\r\n          artArray,\r\n        });\r\n      })\r\n    //   The Object ID is then added to the end of the Objects endpoint from the MET's API\r\n    //  in order to obtain the full object data for the individual art piece\r\n      .then(() => {\r\n        axios({\r\n          url: `https://collectionapi.metmuseum.org/public/collection/v1/objects/${artResult}`,\r\n          method: 'GET',\r\n          responseType: 'json',\r\n        }).then((objectDetails) => {\r\n          objectDetails = objectDetails.data;\r\n          this.setState({\r\n            objectDetails,\r\n          });\r\n        });\r\n      });\r\n    };\r\n\r\n  componentDidMount() {\r\n    this.getApiData();\r\n  }\r\n//   The current choice of search query is compared to the previous selection, if different the\r\n// search goes through \r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.userChoice !== prevProps.userChoice) {\r\n      this.getApiData();\r\n    }\r\n  }\r\n  //    A variety of object data from the randomized art piece selection can then be populated into the main page\r\n  render() {\r\n    return (\r\n      <div className=\"artworkDisplay\">\r\n        <h2>{this.artResult}</h2>\r\n        <h2>Title: \"{this.state.objectDetails && this.state.objectDetails.title}\", Artist: \"{this.state.objectDetails && this.state.objectDetails.artistDisplayName}\"</h2>\r\n        <img src={this.state.objectDetails && this.state.objectDetails.primaryImage} alt={this.state.objectDetails && this.state.objectDetails.title}></img>\r\n      </div>\r\n    );\r\n}\r\n}\r\n\r\nexport default ArtSearch;\r\n","import React, { Component } from 'react';\nimport ArtSearch from './ArtSearch';\nimport axios from 'axios';\nimport './App.css';\n\nclass App extends Component {\n  \n  constructor() {\n    super();\n    this.state = {\n      isClick: false,\n      animalChoice: '',\n    }\n  }\n  \n  //on a button click, the choice's value is stored in the state.\n  handleClick = (event) => {\n    this.setState({\n      isClick: true,\n      animalChoice: event.currentTarget.value,\n    })\n  }\n  \n  render() {\n    return (\n      <div className=\"mainPage\">\n      <h1>Animals @ The Met!</h1>\n      <h3>Press a button below to see a piece of artwork from the Metropolitan Museum of Art featuring the corresponding animal!</h3>\n      \n      <section className=\"finalArrangement\">\n\n        <div className=\"buttonAlignment\">\n          <button value=\"horses\" onClick={this.handleClick}><a href=\"#\">Horses</a></button>\n          <button value=\"tags:dog\" onClick={this.handleClick}><a href=\"#\">Dogs</a></button>\n          <button value=\"birds\" onClick={this.handleClick}><a href=\"#\">Birds</a></button>\n          <button value=\"tags:dragon\" onClick={this.handleClick}><a href=\"#\">Dragons</a></button>\n          <button value=\"tags:animals\" onClick={this.handleClick}><a href=\"#\">Random</a></button>\n        </div>\n\n{/* The click event and choice is handled through a ternary expression and passed on to the ArtSearch module */}\n{/* The module is designated to return its output here in the page */}\n            {\n              this.state.isClick ? <ArtSearch userChoice = {this.state.animalChoice}/> : null\n            }\n\n      </section>\n\n    </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}